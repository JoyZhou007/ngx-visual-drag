import { calculateRotatedPointCoordinate, getCenterPoint } from './translate';
const funcs = {
    lt: calculateLeftTop,
    t: calculateTop,
    rt: calculateRightTop,
    r: calculateRight,
    rb: calculateRightBottom,
    b: calculateBottom,
    lb: calculateLeftBottom,
    l: calculateLeft,
};
function calculateLeftTop(style, curPositon, pointInfo) {
    const { symmetricPoint } = pointInfo;
    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint);
    const newTopLeftPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate);
    const newBottomRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate);
    const newWidth = newBottomRightPoint.x - newTopLeftPoint.x;
    const newHeight = newBottomRightPoint.y - newTopLeftPoint.y;
    if (newWidth > 0 && newHeight > 0) {
        style.width = Math.round(newWidth);
        style.height = Math.round(newHeight);
        style.left = Math.round(newTopLeftPoint.x);
        style.top = Math.round(newTopLeftPoint.y);
    }
}
function calculateTop(style, curPositon, pointInfo) {
    const { symmetricPoint, curPoint } = pointInfo;
    const rotatedcurPositon = calculateRotatedPointCoordinate(curPositon, curPoint, -style.rotate);
    const rotatedTopMiddlePoint = calculateRotatedPointCoordinate({
        x: curPoint.x,
        y: rotatedcurPositon.y,
    }, curPoint, style.rotate);
    // 勾股定理
    const newHeight = Math.sqrt(Math.pow((rotatedTopMiddlePoint.x - symmetricPoint.x), 2) +
        Math.pow((rotatedTopMiddlePoint.y - symmetricPoint.y), 2));
    if (newHeight > 0) {
        const newCenter = {
            x: rotatedTopMiddlePoint.x -
                (rotatedTopMiddlePoint.x - symmetricPoint.x) / 2,
            y: rotatedTopMiddlePoint.y +
                (symmetricPoint.y - rotatedTopMiddlePoint.y) / 2,
        };
        style.height = Math.round(newHeight);
        style.top = Math.round(newCenter.y - newHeight / 2);
        style.left = Math.round(newCenter.x - style.width / 2);
    }
}
function calculateRight(style, curPositon, pointInfo) {
    const { symmetricPoint, curPoint } = pointInfo;
    const rotatedcurPositon = calculateRotatedPointCoordinate(curPositon, curPoint, -style.rotate);
    const rotatedRightMiddlePoint = calculateRotatedPointCoordinate({
        x: rotatedcurPositon.x,
        y: curPoint.y,
    }, curPoint, style.rotate);
    const newWidth = Math.sqrt(Math.pow((rotatedRightMiddlePoint.x - symmetricPoint.x), 2) +
        Math.pow((rotatedRightMiddlePoint.y - symmetricPoint.y), 2));
    if (newWidth > 0) {
        const newCenter = {
            x: rotatedRightMiddlePoint.x -
                (rotatedRightMiddlePoint.x - symmetricPoint.x) / 2,
            y: rotatedRightMiddlePoint.y +
                (symmetricPoint.y - rotatedRightMiddlePoint.y) / 2,
        };
        style.width = Math.round(newWidth);
        style.top = Math.round(newCenter.y - style.height / 2);
        style.left = Math.round(newCenter.x - newWidth / 2);
    }
}
function calculateBottom(style, curPositon, pointInfo) {
    const { symmetricPoint, curPoint } = pointInfo;
    const rotatedcurPositon = calculateRotatedPointCoordinate(curPositon, curPoint, -style.rotate);
    const rotatedBottomMiddlePoint = calculateRotatedPointCoordinate({
        x: curPoint.x,
        y: rotatedcurPositon.y,
    }, curPoint, style.rotate);
    const newHeight = Math.sqrt(Math.pow((rotatedBottomMiddlePoint.x - symmetricPoint.x), 2) +
        Math.pow((rotatedBottomMiddlePoint.y - symmetricPoint.y), 2));
    if (newHeight > 0) {
        const newCenter = {
            x: rotatedBottomMiddlePoint.x -
                (rotatedBottomMiddlePoint.x - symmetricPoint.x) / 2,
            y: rotatedBottomMiddlePoint.y +
                (symmetricPoint.y - rotatedBottomMiddlePoint.y) / 2,
        };
        style.height = Math.round(newHeight);
        style.top = Math.round(newCenter.y - newHeight / 2);
        style.left = Math.round(newCenter.x - style.width / 2);
    }
}
function calculateLeft(style, curPositon, pointInfo) {
    const { symmetricPoint, curPoint } = pointInfo;
    const rotatedcurPositon = calculateRotatedPointCoordinate(curPositon, curPoint, -style.rotate);
    const rotatedLeftMiddlePoint = calculateRotatedPointCoordinate({
        x: rotatedcurPositon.x,
        y: curPoint.y,
    }, curPoint, style.rotate);
    const newWidth = Math.sqrt(Math.pow((rotatedLeftMiddlePoint.x - symmetricPoint.x), 2) +
        Math.pow((rotatedLeftMiddlePoint.y - symmetricPoint.y), 2));
    if (newWidth > 0) {
        const newCenter = {
            x: rotatedLeftMiddlePoint.x -
                (rotatedLeftMiddlePoint.x - symmetricPoint.x) / 2,
            y: rotatedLeftMiddlePoint.y +
                (symmetricPoint.y - rotatedLeftMiddlePoint.y) / 2,
        };
        style.width = Math.round(newWidth);
        style.top = Math.round(newCenter.y - style.height / 2);
        style.left = Math.round(newCenter.x - newWidth / 2);
    }
}
function calculateRightTop(style, curPositon, pointInfo) {
    const { symmetricPoint } = pointInfo;
    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint);
    const newTopRightPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate);
    const newBottomLeftPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate);
    const newWidth = newTopRightPoint.x - newBottomLeftPoint.x;
    const newHeight = newBottomLeftPoint.y - newTopRightPoint.y;
    if (newWidth > 0 && newHeight > 0) {
        style.width = Math.round(newWidth);
        style.height = Math.round(newHeight);
        style.left = Math.round(newBottomLeftPoint.x);
        style.top = Math.round(newTopRightPoint.y);
    }
}
function calculateRightBottom(style, curPositon, pointInfo) {
    const { symmetricPoint } = pointInfo;
    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint);
    const newTopLeftPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate);
    const newBottomRightPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate);
    const newWidth = newBottomRightPoint.x - newTopLeftPoint.x;
    const newHeight = newBottomRightPoint.y - newTopLeftPoint.y;
    if (newWidth > 0 && newHeight > 0) {
        style.width = Math.round(newWidth);
        style.height = Math.round(newHeight);
        style.left = Math.round(newTopLeftPoint.x);
        style.top = Math.round(newTopLeftPoint.y);
    }
}
function calculateLeftBottom(style, curPositon, pointInfo) {
    const { symmetricPoint } = pointInfo;
    const newCenterPoint = getCenterPoint(curPositon, symmetricPoint);
    const newTopRightPoint = calculateRotatedPointCoordinate(symmetricPoint, newCenterPoint, -style.rotate);
    const newBottomLeftPoint = calculateRotatedPointCoordinate(curPositon, newCenterPoint, -style.rotate);
    const newWidth = newTopRightPoint.x - newBottomLeftPoint.x;
    const newHeight = newBottomLeftPoint.y - newTopRightPoint.y;
    if (newWidth > 0 && newHeight > 0) {
        style.width = Math.round(newWidth);
        style.height = Math.round(newHeight);
        style.left = Math.round(newBottomLeftPoint.x);
        style.top = Math.round(newTopRightPoint.y);
    }
}
export default function calculateComponentPositonAndSize(name, style, curPositon, pointInfo) {
    funcs[name](style, curPositon, pointInfo);
}
//# sourceMappingURL=data:application/json;base64,